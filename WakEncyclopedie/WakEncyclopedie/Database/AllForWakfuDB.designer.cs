#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WakEncyclopedie.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AllForWakfuDB")]
	public partial class AllForWakfuDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertItems(Items instance);
    partial void UpdateItems(Items instance);
    partial void DeleteItems(Items instance);
    partial void InsertType_Items(Type_Items instance);
    partial void UpdateType_Items(Type_Items instance);
    partial void DeleteType_Items(Type_Items instance);
    partial void InsertRarity(Rarity instance);
    partial void UpdateRarity(Rarity instance);
    partial void DeleteRarity(Rarity instance);
    partial void InsertStats(Stats instance);
    partial void UpdateStats(Stats instance);
    partial void DeleteStats(Stats instance);
    partial void InsertItems_Have_Stats(Items_Have_Stats instance);
    partial void UpdateItems_Have_Stats(Items_Have_Stats instance);
    partial void DeleteItems_Have_Stats(Items_Have_Stats instance);
    #endregion
		
		public AllForWakfuDBDataContext() : 
				base(global::WakEncyclopedie.Properties.Settings.Default.AllForWakfuDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AllForWakfuDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AllForWakfuDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AllForWakfuDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AllForWakfuDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Items> Items
		{
			get
			{
				return this.GetTable<Items>();
			}
		}
		
		public System.Data.Linq.Table<Type_Items> Type_Items
		{
			get
			{
				return this.GetTable<Type_Items>();
			}
		}
		
		public System.Data.Linq.Table<Rarity> Rarity
		{
			get
			{
				return this.GetTable<Rarity>();
			}
		}
		
		public System.Data.Linq.Table<Stats> Stats
		{
			get
			{
				return this.GetTable<Stats>();
			}
		}
		
		public System.Data.Linq.Table<Items_Have_Stats> Items_Have_Stats
		{
			get
			{
				return this.GetTable<Items_Have_Stats>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Items : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private int _level;
		
		private System.Data.Linq.Binary _image;
		
		private string _url;
		
		private int _idType;
		
		private int _idRarity;
		
		private EntitySet<Items_Have_Stats> _Items_Have_Stats;
		
		private EntityRef<Type_Items> _Type_Items;
		
		private EntityRef<Rarity> _Rarity;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnidTypeChanging(int value);
    partial void OnidTypeChanged();
    partial void OnidRarityChanging(int value);
    partial void OnidRarityChanged();
    #endregion
		
		public Items()
		{
			this._Items_Have_Stats = new EntitySet<Items_Have_Stats>(new Action<Items_Have_Stats>(this.attach_Items_Have_Stats), new Action<Items_Have_Stats>(this.detach_Items_Have_Stats));
			this._Type_Items = default(EntityRef<Type_Items>);
			this._Rarity = default(EntityRef<Rarity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", DbType="Int NOT NULL")]
		public int idType
		{
			get
			{
				return this._idType;
			}
			set
			{
				if ((this._idType != value))
				{
					if (this._Type_Items.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTypeChanging(value);
					this.SendPropertyChanging();
					this._idType = value;
					this.SendPropertyChanged("idType");
					this.OnidTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRarity", DbType="Int NOT NULL")]
		public int idRarity
		{
			get
			{
				return this._idRarity;
			}
			set
			{
				if ((this._idRarity != value))
				{
					if (this._Rarity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRarityChanging(value);
					this.SendPropertyChanging();
					this._idRarity = value;
					this.SendPropertyChanged("idRarity");
					this.OnidRarityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Items_Items_Have_Stats", Storage="_Items_Have_Stats", ThisKey="Id", OtherKey="IdItem")]
		public EntitySet<Items_Have_Stats> Items_Have_Stats
		{
			get
			{
				return this._Items_Have_Stats;
			}
			set
			{
				this._Items_Have_Stats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Items_Items", Storage="_Type_Items", ThisKey="idType", OtherKey="Id", IsForeignKey=true)]
		public Type_Items Type_Items
		{
			get
			{
				return this._Type_Items.Entity;
			}
			set
			{
				Type_Items previousValue = this._Type_Items.Entity;
				if (((previousValue != value) 
							|| (this._Type_Items.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type_Items.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Type_Items.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._idType = value.Id;
					}
					else
					{
						this._idType = default(int);
					}
					this.SendPropertyChanged("Type_Items");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rarity_Items", Storage="_Rarity", ThisKey="idRarity", OtherKey="Id", IsForeignKey=true)]
		public Rarity Rarity
		{
			get
			{
				return this._Rarity.Entity;
			}
			set
			{
				Rarity previousValue = this._Rarity.Entity;
				if (((previousValue != value) 
							|| (this._Rarity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rarity.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Rarity.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._idRarity = value.Id;
					}
					else
					{
						this._idRarity = default(int);
					}
					this.SendPropertyChanged("Rarity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items_Have_Stats(Items_Have_Stats entity)
		{
			this.SendPropertyChanging();
			entity.Items = this;
		}
		
		private void detach_Items_Have_Stats(Items_Have_Stats entity)
		{
			this.SendPropertyChanging();
			entity.Items = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type_Items")]
	public partial class Type_Items : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private System.Data.Linq.Binary _image;
		
		private EntitySet<Items> _Items;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    #endregion
		
		public Type_Items()
		{
			this._Items = new EntitySet<Items>(new Action<Items>(this.attach_Items), new Action<Items>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Items_Items", Storage="_Items", ThisKey="Id", OtherKey="idType")]
		public EntitySet<Items> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Items entity)
		{
			this.SendPropertyChanging();
			entity.Type_Items = this;
		}
		
		private void detach_Items(Items entity)
		{
			this.SendPropertyChanging();
			entity.Type_Items = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rarity")]
	public partial class Rarity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private System.Data.Linq.Binary _image;
		
		private EntitySet<Items> _Items;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    #endregion
		
		public Rarity()
		{
			this._Items = new EntitySet<Items>(new Action<Items>(this.attach_Items), new Action<Items>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rarity_Items", Storage="_Items", ThisKey="Id", OtherKey="idRarity")]
		public EntitySet<Items> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Items entity)
		{
			this.SendPropertyChanging();
			entity.Rarity = this;
		}
		
		private void detach_Items(Items entity)
		{
			this.SendPropertyChanging();
			entity.Rarity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stats")]
	public partial class Stats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _type;
		
		private EntitySet<Items_Have_Stats> _Items_Have_Stats;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public Stats()
		{
			this._Items_Have_Stats = new EntitySet<Items_Have_Stats>(new Action<Items_Have_Stats>(this.attach_Items_Have_Stats), new Action<Items_Have_Stats>(this.detach_Items_Have_Stats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stats_Items_Have_Stats", Storage="_Items_Have_Stats", ThisKey="Id", OtherKey="IdStats")]
		public EntitySet<Items_Have_Stats> Items_Have_Stats
		{
			get
			{
				return this._Items_Have_Stats;
			}
			set
			{
				this._Items_Have_Stats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items_Have_Stats(Items_Have_Stats entity)
		{
			this.SendPropertyChanging();
			entity.Stats = this;
		}
		
		private void detach_Items_Have_Stats(Items_Have_Stats entity)
		{
			this.SendPropertyChanging();
			entity.Stats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items_Have_Stats")]
	public partial class Items_Have_Stats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdItem;
		
		private int _IdStats;
		
		private int _value;
		
		private EntityRef<Items> _Items;
		
		private EntityRef<Stats> _Stats;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdItemChanging(int value);
    partial void OnIdItemChanged();
    partial void OnIdStatsChanging(int value);
    partial void OnIdStatsChanged();
    partial void OnvalueChanging(int value);
    partial void OnvalueChanged();
    #endregion
		
		public Items_Have_Stats()
		{
			this._Items = default(EntityRef<Items>);
			this._Stats = default(EntityRef<Stats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdItem", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdItem
		{
			get
			{
				return this._IdItem;
			}
			set
			{
				if ((this._IdItem != value))
				{
					if (this._Items.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdItemChanging(value);
					this.SendPropertyChanging();
					this._IdItem = value;
					this.SendPropertyChanged("IdItem");
					this.OnIdItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStats", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdStats
		{
			get
			{
				return this._IdStats;
			}
			set
			{
				if ((this._IdStats != value))
				{
					if (this._Stats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStatsChanging(value);
					this.SendPropertyChanging();
					this._IdStats = value;
					this.SendPropertyChanged("IdStats");
					this.OnIdStatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Int NOT NULL")]
		public int value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Items_Items_Have_Stats", Storage="_Items", ThisKey="IdItem", OtherKey="Id", IsForeignKey=true)]
		public Items Items
		{
			get
			{
				return this._Items.Entity;
			}
			set
			{
				Items previousValue = this._Items.Entity;
				if (((previousValue != value) 
							|| (this._Items.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Items.Entity = null;
						previousValue.Items_Have_Stats.Remove(this);
					}
					this._Items.Entity = value;
					if ((value != null))
					{
						value.Items_Have_Stats.Add(this);
						this._IdItem = value.Id;
					}
					else
					{
						this._IdItem = default(int);
					}
					this.SendPropertyChanged("Items");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stats_Items_Have_Stats", Storage="_Stats", ThisKey="IdStats", OtherKey="Id", IsForeignKey=true)]
		public Stats Stats
		{
			get
			{
				return this._Stats.Entity;
			}
			set
			{
				Stats previousValue = this._Stats.Entity;
				if (((previousValue != value) 
							|| (this._Stats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stats.Entity = null;
						previousValue.Items_Have_Stats.Remove(this);
					}
					this._Stats.Entity = value;
					if ((value != null))
					{
						value.Items_Have_Stats.Add(this);
						this._IdStats = value.Id;
					}
					else
					{
						this._IdStats = default(int);
					}
					this.SendPropertyChanged("Stats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
